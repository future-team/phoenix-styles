/**
 * Grid
 * --------------------------------------------------
 * Using flexbox for the grid, inspired by Philip Walton:
 * http://philipwalton.github.io/solved-by-flexbox/demos/grids/
 * By default each .uc-col within a .uc-row will evenly take up
 * available width, and the height of each .uc-col with take
 * up the height of the tallest .uc-col in the same .uc-row.
 */
.ph-grid{
  overflow: hidden;
}
.ph-grid-fluid {
   margin-right: auto;
   margin-left: auto;
   padding-left: @grid-fluid-padding;
   padding-right: @grid-fluid-padding;
}

.ph-row {
  .display-flex();
  margin: 0  -(@grid-padding-width);
  /*width: 100%;*/
}

.ph-row-wrap {
  .flex-wrap(wrap);
}

.ph-row.ph-no-padding {
  padding: 0;
  margin:0;
  > .ph-col {
    padding: 0;
  }
}
// .ph-row-no-padding{
//   .ph-row{
//     padding: 0;
//     margin:0;
//     > .ph-col {
//       padding: 0;
//     }
//   }
// }
/*.row + .row {
  margin-top: (@grid-padding-width / 2) * -1;
  padding-top: 0;
}*/

.ph-col {
  .flex(1);
  display: block;
  // padding: (@grid-padding-width / 2) @grid-padding-width + 5;
  padding: 0 @grid-padding-width;
  width: 100%;
}


/* Vertically Align Columns */
/* .row-* vertically aligns every .col in the .row */
.ph-row-top {
  .align-items(flex-start);
}
.ph-row-bottom {
  .align-items(flex-end);
}
.ph-row-center {
  .align-items(center);
}
.ph-row-stretch {
  .align-items(stretch);
}
.ph-row-baseline {
  .align-items(baseline);
}

/* .col-* vertically aligns an individual .col */
.ph-col-top {
  .align-self(flex-start);
}
.ph-col-bottom {
  .align-self(flex-end);
}
.ph-col-center {
  .align-self(center);
}

/* Column Offsets */

.generate-columns-offsets(100);

.generate-columns-offsets(@n, @i: 5) when (@i =< @n) {
  .ph-col-offset-@{i} {
    margin-left: @i * 100% / @n;
  }
  .generate-columns-offsets(@n, (@i + 5));
}
.ph-col-offset-33, .ph-col-offset-34 {
  margin-left: 33.3333%;
}
.ph-col-offset-66, .ph-col-offset-67 {
  margin-left: 66.6666%;
}
/* Explicit Column Percent Sizes */
/* By default each grid column will evenly distribute */
/* across the grid. However, you can specify individual */
/* columns to take up a certain size of the available area */

.generate-columns(100);

.generate-columns(@n, @i: 5) when (@i =< @n) {
  .ph-col-@{i} {
    .flex(0, 0, @i * 100% / @n);
    max-width: (@i * 100% / @n);
  }
  .generate-columns(@n, (@i + 5));
}

.ph-col-33, .ph-col-34 {
  .flex(0, 0, 33.3333%);
  max-width: 33.3333%;
}

.ph-col-66, .ph-col-67 {
  .flex(0, 0, 66.6666%);
  max-width: 66.6666%;
}

.ph-grid-row{
  .display-flex();
  margin-top: 10px;
  &:first-child{
    margin-top:0;
  }
  label{
    .flex(1);
  }
}
